#!/bin/bash

# === CONFIGURATION ===
REPO_DIR="${REPO_DIR:-$(cd "$(dirname "$0")" && pwd)}"
LOG_FILE="$REPO_DIR/codex_sync.log"
BRANCH=$(git -C "$REPO_DIR" rev-parse --abbrev-ref HEAD)
DATE=$(date '+%Y-%m-%d %H:%M:%S')

log() {
  echo "[$DATE] $1" | tee -a "$LOG_FILE"
}

cd "$REPO_DIR" || {
  log "‚ùå Impossible d'acc√©der au dossier $REPO_DIR"
  exit 1
}

log "üîÑ D√©but synchronisation Codex ‚Üí GitHub (branche : $BRANCH)"

# === REBASE BLOQU√â ?
if [ -d ".git/rebase-merge" ] || [ -d ".git/rebase-apply" ]; then
  log "‚ö†Ô∏è Rebase interrompu d√©tect√© ‚Äî tentative d'abandon..."
  git rebase --abort
fi

# === CR√âATION AUTO DE BRANCHE CODEX SI SUR main ===
if [ "$BRANCH" == "main" ]; then
  NEW_BRANCH="codex/$(date +%Y%m%d-%H%M%S)"
  git checkout -b "$NEW_BRANCH"
  log "üåø Nouvelle branche Codex cr√©√©e : $NEW_BRANCH"
  BRANCH=$NEW_BRANCH
fi

# === COMMIT AUTOMATIQUE ===
git add .
if git diff --cached --quiet; then
  log "‚úÖ Aucun changement local √† valider"
else
  COMMIT_MSG="üîÑ Sync Codex ‚Üí GitHub [$DATE]"
  git commit -m "$COMMIT_MSG" && log "‚úÖ Commit : $COMMIT_MSG" || {
    log "‚ùå Commit √©chou√©"
    exit 1
  }
fi

# === PULL AVEC REBASE ===
log "üì• Tentative de pull avec rebase..."
if git pull origin main --rebase; then
  log "‚úÖ Pull avec rebase r√©ussi"
else
  log "‚ö†Ô∏è Conflit d√©tect√©. Tentative de r√©solution automatique..."

  # === FICHIERS √Ä R√âSOUDRE AUTOMATIQUEMENT ===
  for FILE in README.md .env.example package.json package-lock.json; do
    if grep -q "<<<<<<<" "$FILE" 2>/dev/null; then
      log "‚ö†Ô∏è Conflit d√©tect√© dans $FILE ‚Äî fusion auto"
      awk '
        BEGIN { conflict = 0 }
        /^<<<<<<< / { conflict = 1; next }
        /^=======/ { next }
        /^>>>>>>> / { conflict = 0; next }
        conflict == 0 { print }
      ' "$FILE" > "$FILE.tmp" && mv "$FILE.tmp" "$FILE"
      git add "$FILE"
      log "‚úÖ R√©solu automatiquement : $FILE"
    fi
  done

  if git rebase --continue; then
    log "‚úÖ Rebase termin√© apr√®s r√©solution automatique"
  else
    log "‚ùå Rebase bloqu√© ‚Äî veuillez r√©soudre manuellement"
    exit 1
  fi
fi

# === PUSH FINAL ===
if git push origin "$BRANCH"; then
  log "üöÄ Push r√©ussi vers GitHub"
else
  log "‚ùå Push √©chou√© ‚Äî v√©rifier les droits ou conflits"
  exit 1
fi

# === CR√âATION DE PR AUTOMATIQUE (si gh install√©) ===
if command -v gh >/dev/null 2>&1; then
  if gh pr create --title "üîÑ Sync Codex [$(date +%Y-%m-%d)]" \
                  --body "Automated sync depuis Codex ‚Üí GitHub" \
                  --base main --head "$BRANCH" --label codex-sync; then
    log "üì¨ Pull Request cr√©√©e automatiquement depuis $BRANCH ‚Üí main"
  else
    log "‚ö†Ô∏è Impossible de cr√©er la PR automatiquement"
  fi
else
  log "‚ÑπÔ∏è GitHub CLI (gh) non trouv√© ‚Äî PR non cr√©√©e"
fi

log "‚úÖ Synchronisation compl√®te termin√©e"
exit 0
